set cut_paste_input [stack 0]
version 15.1 v9
push $cut_paste_input
Group {
name rebuild_frames
selected true
xpos 3142
ypos -9225
addUserKnob {20 User}
addUserKnob {26 text1 l "" +STARTLINE T "1) Hit 'Reset' before beginning"}
addUserKnob {41 in l "Input Range" T RIFE1.in}
addUserKnob {41 out l "" -STARTLINE T RIFE1.out}
addUserKnob {41 reset_range l Reset -STARTLINE T RIFE1.reset_range}
addUserKnob {3 startframe +INVISIBLE}
startframe {{RIFE1.in-1000}}
addUserKnob {3 endframe -STARTLINE +INVISIBLE}
endframe {{RIFE1.out-1000}}
addUserKnob {26 ""}
addUserKnob {26 text2 l "" +STARTLINE T "2) Add keys on frames that are good\n    Remove keys on frames to be rebuilt "}
addUserKnob {3 inputframe l Frame}
inputframe {{curve x46 46 x1000 1000 x1001 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 x1046 1046 x1047 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100}}
addUserKnob {22 addkey l "Add Key" -STARTLINE T "n = nuke.thisNode()\['inputframe']\nn.setAnimated()\nt = nuke.frame()\nn.animation(0).setKey(t,t)\n"}
addUserKnob {22 deletekey l "Delete key" -STARTLINE T "n = nuke.thisNode()\['inputframe']\nt = nuke.frame()\n#n.animation(0).removeKeyAt(t)\nn.removeKeyAt(t)"}
addUserKnob {22 addall l "Keyframe all" T "n = nuke.thisNode()\['inputframe']\nn.setAnimated()\nf = nuke.thisNode().firstFrame()\nl = nuke.thisNode().lastFrame()\n\nn.animation(0).setKey(f, f)\nn.animation(0).setKey(l, l)\n\nfor i in range(f, l + 1):\n    n.setValueAt(i, i)" +STARTLINE}
addUserKnob {26 text3 l "" +STARTLINE T "(Do not change value of 'Frame' - leave it as frame number)"}
addUserKnob {26 ""}
addUserKnob {3 kt l INVISIBLE +INVISIBLE}
kt {{curve L 46 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100}}
addUserKnob {3 ko l INVISIBLE +INVISIBLE}
ko {{curve L x46 0 x1000 1 x1001 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 x1046 46 x1047 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100}}
addUserKnob {3 passthrough l INVISIBLE +INVISIBLE}
passthrough 1
addUserKnob {26 text4 l "" +STARTLINE T "3) Hit 'Rebuild' to rebuild 'bad' frames"}
addUserKnob {22 rebuild l Rebuild! T "k = nuke.thisNode()\['inputframe']\n\nif(k.isAnimated()):\n\t\t\t\n\ttOriginalCurve = k.animation(0)\n\t\t\t\t\n\ttKeys = tOriginalCurve.keys()\n\n\ti = 0\n\n\t\n\tkt = nuke.thisNode()\['kt']\n\n\tko  = nuke.thisNode()\['ko']\n\n\tkt.clearAnimated()\n\n\tko.clearAnimated()\n\n\tkt.setAnimated()\n\n\tko.setAnimated()\n\n\tfor tKey in tKeys:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\ttFrame = tKey.x \n\t\ttFrameY = tKey.y\n\n\t\tprint(\"key \" + str(i) + \" has x value \" + str(tFrame) + \", y value \" + str(tFrameY))\n\n\t\tko.setValueAt( i, tFrame )\n\n\t\tkt.setValueAt( tFrame, i )\n\n\t\ti = i+1\n\n\tkoKeys = ko.animation(0).keys()\n\n\tfor tKey in koKeys:\t\n\n\t\ttKey.interpolation = nuke.LINEAR\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\n\tktKeys = kt.animation(0).keys()\n\n\tfor tKey in ktKeys:\t\n\n\t\ttKey.interpolation = nuke.LINEAR\n\np = nuke.thisNode()\['passthrough']\np.setValue(1)" +STARTLINE}
addUserKnob {20 about l About}
addUserKnob {26 credit l "" -STARTLINE T "Rebuilds broken or missing frames using an OFlow. \nAssumes that many of the frames are OK, but that bad frames are littered throughout. \n\nv1.0 by Richard Frazer"}
addUserKnob {26 ""}
}
Input {
inputs 0
name Input1
xpos 475
ypos -625
}
Dot {
name Dot3
xpos 509
ypos -547
addUserKnob {20 beDotTab l BeDot}
addUserKnob {22 rootName l "Add Root Name" -STARTLINE T "nuke.load('beAddRootToLabel.py'), beAddRootToLabel()"}
}
set N5d58f940 [stack 0]
TimeWarp {
lookup {{parent.kt}}
time ""
name TimeWarp5
xpos 475
ypos -480
}
set Nffda2bb0 [stack 0]
OFXuk.co.thefoundry.time.oflow_v100 {
method Motion
timing "Source Frame"
timingFrame {{parent.ko L x1001 1001 x1004 1004 x1005 1005 x1008 1008 x1012 1012 1016 x1150 1150}}
timingSpeed 0.5
filtering Normal
warpMode Normal
correctLuminance false
automaticShutterTime false
shutterTime 0
shutterSamples 1
vectorDetail 0.2
smoothness 0.5
blockSize 6
Tolerances 0
weightRed 0.3
weightGreen 0.6
weightBlue 0.1
showVectors false
cacheBreaker false
name OFlow2
xpos 347
ypos -410
}
push $Nffda2bb0
RIFE.gizmo {
name RIFE
xpos 475
ypos -397
in {{startframe x1011 1001}}
out {{endframe x1011 2107}}
outputFrame {{"\[python -execlocal output_frame\\ =\\ nuke.expression(\\\"timing\\ ==\\ 0\\ ?\\ speed.integrate(in,\\ frame)\\ +\\ in\\ :\\ timingFrame\\\")\\n\\nuse_speed\\ =\\ nuke.thisNode()\\\[\\\"timing\\\"\\].getValue()\\ ==\\ 0\\ \\ \\nspeed_knob\\ =\\ nuke.thisNode()\\\[\\\"speed\\\"\\]\\ntiming_frame_knob\\ =\\ nuke.thisNode()\\\[\\\"timingFrame\\\"\\]\\noutput_fame_text_knob\\ =\\ nuke.thisNode()\\\[\\\"outputFrameText\\\"\\]\\n\\ntiming_frame_knob.setVisible(not\\ use_speed)\\nspeed_knob.setVisible(use_speed)\\noutput_fame_text_knob.setValue(str(round(output_frame,4)))\\n\\ \\ \\ \\nret\\ =\\ output_frame]"}}
}
push $N5d58f940
Dot {
name Dot2
xpos 681
ypos -493
addUserKnob {20 beDotTab l BeDot}
addUserKnob {22 rootName l "Add Root Name" -STARTLINE T "nuke.load('beAddRootToLabel.py'), beAddRootToLabel()"}
}
Dot {
name Dot1
xpos 681
ypos -326
addUserKnob {20 beDotTab l BeDot}
addUserKnob {22 rootName l "Add Root Name" -STARTLINE T "nuke.load('beAddRootToLabel.py'), beAddRootToLabel()"}
}
Switch {
inputs 2
which {{parent.passthrough}}
name Switch1
xpos 475
ypos -287
}
Output {
name Output1
xpos 475
ypos -215
}
Viewer {
frame 1026
input_process false
name Viewer1
xpos 950
ypos -10
hide_input true
}
RIFE.gizmo {
inputs 0
name RIFE1
xpos 235
ypos -455
in 1001
out 1107
outputFrame {{"\[python -execlocal output_frame\\ =\\ nuke.expression(\\\"timing\\ ==\\ 0\\ ?\\ speed.integrate(in,\\ frame)\\ +\\ in\\ :\\ timingFrame\\\")\\n\\nuse_speed\\ =\\ nuke.thisNode()\\\[\\\"timing\\\"\\].getValue()\\ ==\\ 0\\ \\ \\nspeed_knob\\ =\\ nuke.thisNode()\\\[\\\"speed\\\"\\]\\ntiming_frame_knob\\ =\\ nuke.thisNode()\\\[\\\"timingFrame\\\"\\]\\noutput_fame_text_knob\\ =\\ nuke.thisNode()\\\[\\\"outputFrameText\\\"\\]\\n\\ntiming_frame_knob.setVisible(not\\ use_speed)\\nspeed_knob.setVisible(use_speed)\\noutput_fame_text_knob.setValue(str(round(output_frame,4)))\\n\\ \\ \\ \\nret\\ =\\ output_frame]"}}
}
end_group
