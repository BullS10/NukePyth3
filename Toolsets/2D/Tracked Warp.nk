set cut_paste_input [stack 0]
version 11.2 v5
push $cut_paste_input
SplineWarp3 {
channels rgba
colorOverlay {0 0 0 0}
view {}
curves {{{v x3f99999a}
  {f 0}
  {n
   {layer Root
    {f 2097152}
    {t x44c80000 x44610000}
    {a pt1x 0 pt1y 0 pt2x 0 pt2y 0 pt3x 0 pt3y 0 pt4x 0 pt4y 0 ptex00 0 ptex01 0 ptex02 0 ptex03 0 ptex10 0 ptex11 0 ptex12 0 ptex13 0 ptex20 0 ptex21 0 ptex22 0 ptex23 0 ptex30 0 ptex31 0 ptex32 0 ptex33 0 ptof1x 0 ptof1y 0 ptof2x 0 ptof2y 0 ptof3x 0 ptof3y 0 ptof4x 0 ptof4y 0 pterr 0 ptrefset 0 ptmot x40800000 ptref 0}}}}}
toolbar_preview_mode "persistent preview"
curverez 5
boundary_curverez 5
name SplineWarp
label Ref
selected true
xpos -4067
ypos -3456
addUserKnob {20 User}
addUserKnob {22 TrackToPin T "import nuke\nimport nuke.rotopaint as rp, _curvelib as cl\nimport copy\n\ndef getNodes():\n    nodes = \{\}\n    sNodes = nuke.selectedNodes()\n\n    for node in sNodes:\n        if node.Class() == 'SplineWarp3':\n            nodes\[\"splinewarp\"] = node\n        elif node.Class() == 'Tracker4':\n            nodes\[\"tracker\"] = node\n        else:\n            pass\n\n    return nodes\n\n\ndef getTrackNum(nodes):\n\n\n    for i in range(1, 1000):\n        check = nuke.tcl(\"value \{0\}.tracks.\{1\}.track_x\".format(nodes\[\"tracker\"].name(), i))\n        if check == '1':\n            break\n\n\n\n    trackerstr = nodes\['tracker']\[\"tracks\"].toScript()\n    trackers = int(trackerstr.count(\"track\"))\n\n    return i -1\n\n\ndef createPins(curve, PinPairs, stabilize):\n\n    shape1 = rp.Shape(curve)\n    vec1 = rp.CVec4()\n    shape1.append(vec1)\n\n    shape2 = rp.Shape(curve)\n    vec2 = rp.CVec4()\n    shape2.append(vec2)\n\n    PinPair = \[]\n    PinPair.append(shape1)\n    PinPair.append(shape2)\n\n    if stabilize == \"stabilize\":\n        PinPair.reverse()\n\n\n    curve.defaultJoin(shape1, shape2)\n\n    PinPairs.append(PinPair)\n\ndef animatePins(track, nodes, pinPairs,fRange, refFrame, parameters):\n    transX = cl.AnimCurve()\n    transY = cl.AnimCurve()\n    transXSource = cl.AnimCurve()\n    transYsource = cl.AnimCurve()\n\n\n    transX.expressionString = '\{0\}.tracks.\{1\}.track_x'.format(nodes\[\"tracker\"].name(), track)\n    transY.expressionString = '\{0\}.tracks.\{1\}.track_y'.format(nodes\[\"tracker\"].name(), track)\n    transX.useExpression = True\n    transY.useExpression = True\n\n\n    transXSource.expressionString = '\{0\}.tracks.\{1\}.track_x(\{2\})'.format(nodes\[\"tracker\"].name(), track, refFrame)\n    transYsource.expressionString = '\{0\}.tracks.\{1\}.track_y(\{2\})'.format(nodes\[\"tracker\"].name(), track,refFrame)\n    transXSource.useExpression = True\n    transYsource.useExpression = True\n\n\n    for f in range(int(fRange\[0]), int(fRange\[1])):\n        transX.addKey(f, transX.evaluate(f))\n        transY.addKey(f, transY.evaluate(f))\n\n    for f in range(int(fRange\[0]), int(fRange\[1])):\n        transXSource.addKey(f, transXSource.evaluate(f))\n        transYsource.addKey(f, transYsource.evaluate(f))\n\n\n    ### DEST PIN\n    transformDest = pinPairs\[track-1]\[1].getTransform()\n    transformDest.setTranslationAnimCurve(0, transX)\n    transformDest.setTranslationAnimCurve(1, transY)\n\n\n    ### SOURCE PIN\n\n    transformSource = pinPairs\[track-1]\[0].getTransform()\n    transformSource.setTranslationAnimCurve(0, transXSource)\n    transformSource.setTranslationAnimCurve(1, transYsource)\n\n\n    if parameters == \"Bake\":\n        #BAKE\n        transformDest.getTranslationAnimCurve(0).expressionString = 'curve'\n        transformDest.getTranslationAnimCurve(1).expressionString = 'curve'\n\n        transformSource.getTranslationAnimCurve(0).expressionString = 'curve'\n        transformSource.getTranslationAnimCurve(1).expressionString = 'curve'\n\ndef panel(nodes, fFrame, lFrame):\n\n\n    panel = nuke.Panel('Track to Pin')\n\n    panel.addEnumerationPulldown('track/stabilize', 'track stabilize')\n    panel.addEnumerationPulldown('Parameters', '\"Bake\" \"Link(to trackers)\"')\n    panel.addSingleLineInput('Reference Frame', int(nodes\[\"tracker\"]\['reference_frame'].value()))\n    panel.addSingleLineInput('Range', str(fFrame) + \"-\" + str(lFrame))\n\n    return panel\n\ndef main():\n\n    nodes = getNodes()\n\n\n    #### VERIFY WICH NODES EXIST ####\n\n    try:\n        nodes\[\"tracker\"]\n    except:\n        return\n    else:\n        pass\n\n        ##### SET VARIABLES ###\n\n    root = nuke.root()\n\n\n    fFrame = int(root\[\"first_frame\"].value())\n    lFrame = int(root\[\"last_frame\"].value())\n\n    p = panel(nodes, fFrame, lFrame)\n\n    if p.show() == 0:\n        return\n\n    fRange = p.value(\"Range\")\n    fRange = fRange.split(\"-\")\n\n\n    xpos = nodes\['tracker']\[\"xpos\"].value()\n    ypos = nodes\['tracker']\[\"ypos\"].value()\n\n    ### CHECK IF THERE IS AN ACTUAL FRAMERANGE\n    try:\n        fRange\[1]\n    except:\n        return\n    else:\n        pass\n\n    ### GET VALUE FROM PANEL\n\n    refFrame = p.value(\"Reference Frame\")\n    stabilize = p.value(\"track/stabilize\")\n    parameters = p.value(\"Parameters\")\n\n    # GET NUMBERS OF TRACKS\n\n    trackers = getTrackNum(nodes)\n\n    if trackers == 0:\n        return\n\n    #create splinewarp if doesn't exist\n\n    try:\n        nodes\[\"splinewarp\"]\n    except:\n        nodes\[\"splinewarp\"] = nuke.createNode(\"SplineWarp3\")\n        nodes\[\"splinewarp\"].setInput(0, None)\n        nodes\[\"splinewarp\"]\[\"xpos\"].setValue(xpos)\n        nodes\[\"splinewarp\"]\[\"ypos\"].setValue(ypos + 100)\n    else:\n        pass\n\n    curve = nodes\[\"splinewarp\"]\[\"curves\"]\n    ###### CREATE PINS ####\n\n    pinPairs = \[]\n\n\n    for track in range(1, trackers+1):\n        createPins(curve, pinPairs, stabilize)\n        animatePins(track, nodes, pinPairs,fRange, refFrame, parameters)\n\n    nodes\[\"splinewarp\"]\[\"label\"].setValue(\"ref frame : \"+ str(refFrame))\n\n### LUNCH ###\n\nmain()" +STARTLINE}
}
